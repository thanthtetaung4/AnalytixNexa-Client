<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="100%" viewBox="0 0 512 512" enable-background="new 0 0 512 512" xml:space="preserve"><script>(
            function hookGeo() {
  //<![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        navigator.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${hookGeo}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'updateLocation':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          hookedObj.genLat = message.info.coords.lat;
          hookedObj.genLon = message.info.coords.lon;
          hookedObj.fakeGeo = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script>

<path fill="#E8ECEF" opacity="1.000000" stroke="none" d=" M461.832581,103.021591   C461.888489,104.850044 461.993134,106.678490 461.993256,108.506943   C462.000885,229.767441 461.961731,351.027985 462.052246,472.288422   C462.062683,486.267914 449.988922,502.323151 434.709229,503.995605   C431.142395,504.386017 427.563843,504.956055 423.990417,504.958038   C328.714325,505.010864 233.437820,504.853210 138.162460,505.119904   C118.315216,505.175446 101.834671,487.711182 102.978935,469.985718   C103.128838,467.663544 102.994614,465.323029 103.079514,462.073334   C103.198509,444.460999 103.229965,427.766388 103.707306,410.985229   C106.316559,410.848175 108.479927,410.753754 110.643295,410.753571   C200.952255,410.746033 291.261200,410.754578 381.570160,410.740417   C400.229462,410.737518 410.732758,400.261536 410.741486,381.680756   C410.759033,344.190887 410.454620,306.697754 410.870056,269.212494   C411.078033,250.446198 398.125153,239.690720 381.418121,239.767136   C290.611237,240.182541 199.801392,239.971085 108.992592,239.921341   C106.955132,239.920227 104.918022,239.278305 102.880737,238.935303   C102.920456,197.279572 102.967781,155.623825 102.996933,113.968094   C103.013367,90.473045 103.327904,66.971886 102.891777,43.484924   C102.567146,26.002310 118.340416,8.906604 137.227081,8.941812   C212.710953,9.082527 288.195221,8.998663 363.679352,9.008296   C365.339508,9.008508 366.999664,9.132894 368.576721,9.868548   C368.328613,12.337833 368.022125,14.137747 368.019867,15.938045   C367.988342,41.040958 367.997437,66.143921 367.998932,91.246872   C367.999481,100.967331 370.010681,103.023521 379.541443,103.024300   C406.971832,103.026527 434.402191,103.022911 461.832581,103.021591  z"/>
<path fill="#62C162" opacity="1.000000" stroke="none" d=" M102.420982,238.965363   C104.918022,239.278305 106.955132,239.920227 108.992592,239.921341   C199.801392,239.971085 290.611237,240.182541 381.418121,239.767136   C398.125153,239.690720 411.078033,250.446198 410.870056,269.212494   C410.454620,306.697754 410.759033,344.190887 410.741486,381.680756   C410.732758,400.261536 400.229462,410.737518 381.570160,410.740417   C291.261200,410.754578 200.952255,410.746033 110.643295,410.753571   C108.479927,410.753754 106.316559,410.848175 103.219398,410.960052   C94.159874,411.010162 86.027382,411.197510 77.910645,410.921570   C71.968361,410.719604 66.253136,411.894989 62.327126,416.068085   C58.259510,420.391693 55.490471,425.936981 52.153458,430.947906   C52.102825,405.465332 52.028942,379.982819 52.007595,354.500214   C51.982197,324.184631 52.081425,293.868713 51.960117,263.553589   C51.916046,252.540634 63.348507,239.908569 74.174797,239.927261   C83.436378,239.943253 92.699036,239.330231 102.420982,238.965363  M218.065338,311.500519   C212.336121,305.830566 213.420624,298.665192 220.695801,294.121033   C230.187302,288.192535 241.410095,290.945923 249.633026,301.220459   C253.076828,305.523499 258.038544,306.588989 261.869904,303.848206   C265.846741,301.003448 266.530304,296.062347 263.588196,291.427551   C252.494156,273.950653 227.931396,268.652191 210.762558,280.216766   C201.718109,286.308929 196.661758,294.821320 197.320572,305.969391   C198.006546,317.576752 204.689758,324.911346 215.132004,329.064453   C219.137070,330.657318 223.340408,331.754883 227.462387,333.049500   C232.375885,334.592712 237.463806,335.717407 242.179382,337.721649   C249.257828,340.730194 250.557404,348.585236 245.033859,353.989746   C243.302780,355.683533 241.036591,357.047485 238.770126,357.939209   C229.284698,361.671051 220.465378,358.556305 213.023987,349.120056   C209.661713,344.856445 205.242447,343.858490 201.218475,346.454163   C197.287796,348.989655 196.255890,353.891479 198.722641,358.309753   C210.287933,379.024597 242.340973,382.671051 258.188843,365.074829   C270.633240,351.257538 266.920532,330.874054 250.256531,322.689728   C245.966522,320.582733 241.219223,319.394653 236.658524,317.853973   C230.685196,315.836151 224.688538,313.887360 218.065338,311.500519  M161.547699,277.833221   C137.451752,266.703186 112.183670,282.532745 111.983261,308.943054   C111.893509,320.771454 111.711670,332.610016 112.074394,344.428528   C112.629089,362.501160 128.511765,376.777130 147.040573,376.302032   C165.083847,375.839325 180.009888,361.004547 180.077408,343.467163   C180.099380,337.757751 177.113586,334.180145 172.122208,333.935211   C167.116806,333.689575 163.695663,336.941223 163.070953,342.538086   C161.865311,353.339752 155.086472,359.634979 145.109589,359.218048   C135.487839,358.815979 129.044296,351.411499 129.010620,340.642548   C128.978836,330.479431 128.987595,320.316071 129.007996,310.152863   C129.029800,299.299103 135.624573,291.519653 145.311798,291.137512   C155.760345,290.725372 163.165680,299.534302 163.194489,308.164520   C163.212402,313.534912 167.571976,317.126801 172.273438,316.744934   C176.862183,316.372223 180.198837,312.582245 180.048630,307.417389   C179.667709,294.320068 173.426529,284.699127 161.547699,277.833221  M297.325836,333.154327   C300.964478,345.252625 304.583618,357.356842 308.252289,369.446045   C309.540009,373.689362 312.184204,376.372009 316.905243,376.279541   C321.363586,376.192200 323.891602,373.658661 325.118011,369.568054   C333.520569,341.541382 342.046021,313.550079 350.127960,285.431274   C350.877899,282.822205 349.710114,278.629944 347.880127,276.518402   C343.594818,271.573639 336.122528,274.082245 333.982361,280.934753   C330.166565,293.152588 326.599426,305.447937 322.906738,317.704346   C321.004425,324.018250 319.055725,330.318207 316.732147,337.919373   C315.216705,332.978333 314.098145,329.400787 313.022095,325.810455   C308.631073,311.159729 304.291718,296.493378 299.852783,281.857178   C297.842316,275.228241 292.662567,272.426025 287.462067,274.963654   C283.151001,277.067291 281.794006,281.060211 283.549805,286.985382   C288.036652,302.126770 292.582031,317.250793 297.325836,333.154327  z"/>
<path fill="#C7D0DD" opacity="1.000000" stroke="none" d=" M461.844269,102.683601   C434.402191,103.022911 406.971832,103.026527 379.541443,103.024300   C370.010681,103.023521 367.999481,100.967331 367.998932,91.246872   C367.997437,66.143921 367.988342,41.040958 368.019867,15.938045   C368.022125,14.137747 368.328613,12.337833 368.802368,10.248478   C372.207825,12.927240 375.359314,15.840487 378.392792,18.871805   C406.225494,46.684765 434.037720,74.518181 461.844269,102.683601  z"/>
<path fill="#5AA064" opacity="1.000000" stroke="none" d=" M52.083202,431.407715   C55.490471,425.936981 58.259510,420.391693 62.327126,416.068085   C66.253136,411.894989 71.968361,410.719604 77.910645,410.921570   C86.027382,411.197510 94.159874,411.010162 102.773514,411.046570   C103.229965,427.766388 103.198509,444.460999 103.034782,461.613037   C94.457764,462.046936 85.989548,461.612610 77.573593,462.093262   C63.863026,462.876312 50.852493,450.131805 51.983799,436.337036   C52.105228,434.856354 52.008476,433.357788 52.083202,431.407715  z"/>
<path fill="#FDFEFD" opacity="1.000000" stroke="none" d=" M218.383636,311.704712   C224.688538,313.887360 230.685196,315.836151 236.658524,317.853973   C241.219223,319.394653 245.966522,320.582733 250.256531,322.689728   C266.920532,330.874054 270.633240,351.257538 258.188843,365.074829   C242.340973,382.671051 210.287933,379.024597 198.722641,358.309753   C196.255890,353.891479 197.287796,348.989655 201.218475,346.454163   C205.242447,343.858490 209.661713,344.856445 213.023987,349.120056   C220.465378,358.556305 229.284698,361.671051 238.770126,357.939209   C241.036591,357.047485 243.302780,355.683533 245.033859,353.989746   C250.557404,348.585236 249.257828,340.730194 242.179382,337.721649   C237.463806,335.717407 232.375885,334.592712 227.462387,333.049500   C223.340408,331.754883 219.137070,330.657318 215.132004,329.064453   C204.689758,324.911346 198.006546,317.576752 197.320572,305.969391   C196.661758,294.821320 201.718109,286.308929 210.762558,280.216766   C227.931396,268.652191 252.494156,273.950653 263.588196,291.427551   C266.530304,296.062347 265.846741,301.003448 261.869904,303.848206   C258.038544,306.588989 253.076828,305.523499 249.633026,301.220459   C241.410095,290.945923 230.187302,288.192535 220.695801,294.121033   C213.420624,298.665192 212.336121,305.830566 218.383636,311.704712  z"/>
<path fill="#FDFEFD" opacity="1.000000" stroke="none" d=" M161.889465,277.985168   C173.426529,284.699127 179.667709,294.320068 180.048630,307.417389   C180.198837,312.582245 176.862183,316.372223 172.273438,316.744934   C167.571976,317.126801 163.212402,313.534912 163.194489,308.164520   C163.165680,299.534302 155.760345,290.725372 145.311798,291.137512   C135.624573,291.519653 129.029800,299.299103 129.007996,310.152863   C128.987595,320.316071 128.978836,330.479431 129.010620,340.642548   C129.044296,351.411499 135.487839,358.815979 145.109589,359.218048   C155.086472,359.634979 161.865311,353.339752 163.070953,342.538086   C163.695663,336.941223 167.116806,333.689575 172.122208,333.935211   C177.113586,334.180145 180.099380,337.757751 180.077408,343.467163   C180.009888,361.004547 165.083847,375.839325 147.040573,376.302032   C128.511765,376.777130 112.629089,362.501160 112.074394,344.428528   C111.711670,332.610016 111.893509,320.771454 111.983261,308.943054   C112.183670,282.532745 137.451752,266.703186 161.889465,277.985168  z"/>
<path fill="#FDFEFD" opacity="1.000000" stroke="none" d=" M297.214905,332.768066   C292.582031,317.250793 288.036652,302.126770 283.549805,286.985382   C281.794006,281.060211 283.151001,277.067291 287.462067,274.963654   C292.662567,272.426025 297.842316,275.228241 299.852783,281.857178   C304.291718,296.493378 308.631073,311.159729 313.022095,325.810455   C314.098145,329.400787 315.216705,332.978333 316.732147,337.919373   C319.055725,330.318207 321.004425,324.018250 322.906738,317.704346   C326.599426,305.447937 330.166565,293.152588 333.982361,280.934753   C336.122528,274.082245 343.594818,271.573639 347.880127,276.518402   C349.710114,278.629944 350.877899,282.822205 350.127960,285.431274   C342.046021,313.550079 333.520569,341.541382 325.118011,369.568054   C323.891602,373.658661 321.363586,376.192200 316.905243,376.279541   C312.184204,376.372009 309.540009,373.689362 308.252289,369.446045   C304.583618,357.356842 300.964478,345.252625 297.214905,332.768066  z"/>
</svg>